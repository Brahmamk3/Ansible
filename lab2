Ansible Lab Guide: Testing Common Modules on EC2 Ubuntu
This lab will help you practice Ansible modules on two EC2 Ubuntu machines:

Controller EC2 â†’ where Ansible is installed
Managed EC2 â†’ where tasks will be executed
1. Pre-requisites
Ensure Ansible is installed on controller EC2:
sudo apt update -y
sudo apt install ansible -y
Copy your .pem key to controller EC2 (from local machine):
On Mac/Linux:

scp -i ~/.ssh/YourKey.pem ~/.ssh/YourKey.pem ubuntu@<controller-ec2-ip>:~/.ssh/
On Windows PowerShell:

scp -i C:\Users\YourUser\Downloads\YourKey.pem C:\Users\YourUser\Downloads\YourKey.pem ubuntu@<controller-ec2-ip>:~/.ssh/
Set permissions on controller EC2:
chmod 600 ~/.ssh/YourKey.pem
Configure inventory (/etc/ansible/hosts):
[webservers]
ansible_host=<managed-ec2-public-ip> ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/YourKey.pem
Test connection:
ansible webservers -m ping
Expected output:

<managed-ec2-public-ip> | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
2. Lab Exercises â€“ Common Ansible Modules
ðŸ”¹ APT Module (Install Packages)
Create install_git.yml:

---
- name: Install Git on managed EC2
  hosts: webservers
  become: yes

  tasks:
    - name: Install Git
      apt:
        name: git
        state: present
        update_cache: yes
Run:

ansible-playbook install_git.yml
ðŸ”¹ SERVICE Module (Manage Services)
Create apache_service.yml:

---
- name: Ensure Apache is running
  hosts: webservers
  become: yes

  tasks:
    - name: Start Apache service
      service:
        name: apache2
        state: started
        enabled: yes
ðŸ”¹ COPY Module (Copy Files)
Create a file:

echo "<h1>Hello from Ansible Copy Module</h1>" > index.html
Create copy_file.yml:

---
- name: Copy index.html to Apache directory
  hosts: webservers
  become: yes

  tasks:
    - name: Copy index.html
      copy:
        src: ./index.html
        dest: /var/www/html/index.html
Run:

ansible-playbook copy_file.yml
Check in browser: http://<managed-ec2-public-ip>/

ðŸ”¹ FILE Module (Manage Files & Permissions)
Create file_permission.yml:

---
- name: Manage file permissions
  hosts: webservers
  become: yes

  tasks:
    - name: Create test file
      file:
        path: /tmp/testfile
        state: touch
        mode: '0644'
ðŸ”¹ USER Module (Create User)
Create create_user.yml:

---
- name: Create user on EC2
  hosts: webservers
  become: yes

  tasks:
    - name: Add user devuser
      user:
        name: devuser
        state: present
Run and verify:

ansible-playbook create_user.yml
ssh -i ~/.ssh/YourKey.pem ubuntu@<managed-ec2-ip> "id devuser"
ðŸ”¹ TEMPLATE Module (Dynamic Content)
Create template index.html.j2:

<h1>Hello from {{ ansible_hostname }}</h1>
Create playbook template_file.yml:

---
- name: Deploy template to Apache directory
  hosts: webservers
  become: yes

  tasks:
    - name: Copy template
      template:
        src: ./index.html.j2
        dest: /var/www/html/index.html
Run:

ansible-playbook template_file.yml
Check in browser â†’ It should display the hostname of the EC2.

3. Summary
apt â†’ install packages
service â†’ start/stop services
copy â†’ copy files
file â†’ manage files/permissions
user â†’ create/manage users
template â†’ generate dynamic files with variables
With these modules, you can automate almost all basic server management tasks ðŸš€
